# <STRUCTURE-BELOW-IS-TO-BE-DOCUMENTED>
[args] > app
  QQ.fs.path > state-path
    args.at 0
  seq > @
    *
      while
        true > [i] >>
        [i] >>
          seq > @
            *
              external.branch > branch
              external.program-name > program-name
              external.log
                "Reading..."
              currently-saved-data > data
                branch
                program-name
              external.log
                "Getting current version"
              version > current-version
                branch
                program-name
              data.actualized > new-data
                current-version
              program-data-storage > storage
                state-path
              external.log
                "Writing..."
              storage.write
                new-data
              new-data.output-as-rss

  [branch program-name] > version
    seq > @
      *
        external.version > version-number
          branch
          program-name
        program-version
          version-number
          current-time.tv-sec

  [branch program-name] > currently-saved-data
    seq > @
      *
        program-data-storage > storage
          state-path
        storage.read > data
          branch
          program-name

  [] > current-time
    output. > @
      QQ.sys.posix
        "gettimeofday"
        * QQ.sys.posix.timeval

# <STRUCTURE-BELOW-IS-TO-BE-DOCUMENTED>
[state-path] > program-data-storage
  state-path > @
  [branch program-name] > data-file
    QQ.fs.file > file
      QQ.fs.path.joined
        *
          state-path
          QQ.fs.path
            branch
          QQ.fs.path
            program-name
    QQ.fs.dir > directory
      QQ.fs.file
        QQ.fs.path
          file.dirname
    seq > @
      *
        directory.made
        file

  [branch program-name] > read
    data-file > file
      branch
      program-name
    file.path > src
    seq > @
      *
        if.
          exists.
            QQ.fs.file
              src
          seq
            *
              external.read > content
                file
              program-data
                branch
                program-name
                mapped.
                  QQ.structs.list
                    split.
                      content
                      "\n"
                  [line] >>
                    program-version > @
                      at.
                        QQ.txt.sscanf
                          "%s|||%d"
                          line
                        0
                      at.
                        QQ.txt.sscanf
                          "%s|||%d"
                          line
                        1
          seq
            *
              program-data
                branch
                program-name
                QQ.structs.list
                  tuple.empty

  [program-data-instance] > write
    data-file > file
      program-data-instance.branch
      program-data-instance.program-name
    seq > @
      *
        program-data-instance.versions.reduced > serialized-versions
          QQ.txt.text
            ""
          [accum version]
            chained. > @
              accum
              *
                QQ.txt.text
                  version.version-number
                QQ.txt.text
                  "|||"
                QQ.txt.text
                  QQ.txt.sprintf
                    "%d"
                    * version.timestamp
                QQ.txt.text
                  "\n"
        external.log
          serialized-versions
        external.write
          file
          serialized-versions
        program-data-instance

# The code defines an object `program-data` with nested objects related to managing program versions and outputting them as an RSS feed.
# - **`program-data`**: Represents the data for a specific program, including its name and version history. It takes `branch`, `program-name`, and `versions` (a list of `program-version` objects).
# - **`output-as-rss`**: Generates and outputs an RSS feed containing the version history.  It constructs the XML structure, including title, link, and description elements for each version. It also interacts with external resources for line counting and standard output. It uses external.line-counter to output the number of lines in the RSS feed.
# - **`actualized`**: Compares a new version against existing versions, adding it to the version list only if it's a truly new version (not a duplicate of the most recent one).
# - **`program-version`**: Represents a single program version with a version number and a timestamp.
[branch program-name versions] > program-data
  program-name > @

  # Have some weird stackoverflow problems if I try to separate rss-string creation and the output.
  # Therefore, I have to break responsibilities here and unify rss-string creation and the ouput.
  [] > output-as-rss
    QQ.txt.sprintf > prefix
      "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>%s versions</title>\n  <link>https://search.nixos.org/packages?channel=%s&from=0&size=50&sort=relevance&type=packages&query=%s</link>\n  <description>History of versions</description>"
      * program-name branch program-name
    [] > output-middle-part
      seq > @
        mapped.
          versions
          [version] >>
            QQ.io.stdout > @
              QQ.txt.sprintf
                "  <item>\n    <title>%s</title>\n    <link>https://search.nixos.org/packages?channel=%s&from=0&size=50&sort=relevance&type=packages&query=%s</link>\n    <description>New version at %d</description>\n  </item>\n"
                * version.version-number branch program-name version.timestamp
    "</channel>\n\n</rss>" > suffix
    seq > @
      *
        QQ.io.stdout
          "Rss:\n"
        5.times versions.length > number-of-lines-middle
        7 > prefix-lines
        3 > suffix-lines
        (number-of-lines-middle.plus prefix-lines).plus suffix-lines > number-of-lines
        external.line-counter number-of-lines
        QQ.io.stdout
          prefix
        QQ.io.stdout
          "\n"
        output-middle-part
        QQ.io.stdout
          suffix
        QQ.io.stdout
          "\n"

  # <STRUCTURE-BELOW-IS-TO-BE-DOCUMENTED>
  [new-version] > actualized
    program-data > @
      branch
      program-name
      if.
        and.
          eq.
            last-index-of.
              versions
              new-version
            versions.length.minus 1
          not.
            versions.is-empty
        versions
        versions.with new-version

# <STRUCTURE-BELOW-IS-TO-BE-DOCUMENTED>
[version-number timestamp] > program-version
  version-number > @

# <STRUCTURE-BELOW-IS-TO-BE-DOCUMENTED>
[] > external
  "" > @
  "|||" > command-separator

  [line-count] > line-counter
    QQ.io.stdout > @
      QQ.txt.sprintf
        "(lines: %d)\n"
        * line-count

  [content] > output-multiline
    QQ.txt.text > text-content
      content
    split. > lines
      text-content
      "\n"
    seq > @
      *
        line-counter
          lines.length
        QQ.io.stdout
          QQ.txt.sprintf
            "%s\n"
            * content

  [text] > log
    seq > @
      *
        QQ.io.stdout
          "Log:\n"
        output-multiline
          text

  [file content] > write
    QQ.txt.text > write-file
      "write-file"
    seq > @
      *
        send-command
          write-file.chained
            * command-separator file.as-path
        output-multiline content
        get-confirmation

  [file] > read
    [items] > range
      QQ.structs.range > @
        []
          [num] > build
            num > @
            build (@.plus 1) > next
          build 0 > @
        items
    QQ.txt.text > read-file
      "read-file"
    seq > @
      *
        send-command
          read-file.chained
            * command-separator file.as-path
        QQ.io.stdin.next-line > metadata
        (QQ.txt.sscanf "(lines: %d)" metadata).at 0 > line-count
        joined. > content
          QQ.txt.text
            "\n"
          mapped.
            range
              line-count
            QQ.io.stdin.next-line > [i]
        content

  [command] > send-command
    QQ.io.stdout > @
      chained.
        QQ.txt.text
          "Request: "
        *
          QQ.txt.text
            command
          QQ.txt.text
            "\n"

  [] > get-response
    seq > @
      *
        QQ.io.stdin.next-line

  [] > get-confirmation
    seq > @
      *
        QQ.io.stdin.next-line

  [branch program-name] > version
    QQ.txt.text > get-version
      "get-version"
    seq > @
      *
        send-command
          get-version.chained
            * command-separator branch command-separator program-name
        get-response > version-number
        version-number

  [] > branch
    QQ.txt.text > get-branch
      "branch"
    seq > @
      *
        send-command
          get-branch
        get-response

  [] > program-name
    QQ.txt.text > program-name
      "program-name"
    seq > @
      *
        send-command
          program-name
        get-response

# Doctest
[] > doctest-entry
  seq > @
    *
      QQ.io.stdout
        "<MEANINGFUL-OUTPUT-START>"
      doctest
      QQ.io.stdout
        "<MEANINGFUL-OUTPUT-END>"

# Doctest
doctest = """
from eo import Eo
import io
import sys
eo_code = '''
#exit
[branch program-name versions] > program-data
  program-name > @
  # Have some weird stackoverflow problems if I try to separate rss-string creation and the output.
  # Therefore, I have to break responsibilities here and unify rss-string creation and the ouput.
  [] > output-as-rss
    QQ.txt.sprintf > prefix
      "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" ?>\\n<rss version=\\"2.0\\">\\n\\n<channel>\\n  <title>%s versions</title>\\n  <link>https://search.nixos.org/packages?channel=%s&from=0&size=50&sort=relevance&type=packages&query=%s</link>\\n  <description>History of versions</description>"
      * program-name branch program-name
    [] > output-middle-part
      seq > @
        mapped.
          versions
          [version] >>
            QQ.io.stdout > @
              QQ.txt.sprintf
                "  <item>\\n    <title>%s</title>\\n    <link>https://search.nixos.org/packages?channel=%s&from=0&size=50&sort=relevance&type=packages&query=%s</link>\\n    <description>New version at %d</description>\\n  </item>\\n"
                * version.version-number branch program-name version.timestamp
    "</channel>\\n\\n</rss>" > suffix
    seq > @
      *
        QQ.io.stdout
          "Rss:\\n"
        5.times versions.length > number-of-lines-middle
        7 > prefix-lines
        3 > suffix-lines
        (number-of-lines-middle.plus prefix-lines).plus suffix-lines > number-of-lines
        external.line-counter number-of-lines
        QQ.io.stdout
          prefix
        QQ.io.stdout
          "\\n"
        output-middle-part
        QQ.io.stdout
          suffix
        QQ.io.stdout
          "\\n"
  # 
  [new-version] > actualized
    program-data > @
      branch
      program-name
      if.
        and.
          eq.
            last-index-of.
              versions
              new-version
            versions.length.minus 1
          not.
            versions.is-empty
        versions
        versions.with new-version
# 
[version-number timestamp] > program-version
  version-number > @
# 
[] > external
  "" > @
  "|||" > command-separator
  [line-count] > line-counter
    QQ.io.stdout > @
      QQ.txt.sprintf
        "(lines: %d)\\n"
        * line-count
  [content] > output-multiline
    QQ.txt.text > text-content
      content
    split. > lines
      text-content
      "\\n"
    seq > @
      *
        line-counter
          lines.length
        QQ.io.stdout
          QQ.txt.sprintf
            "%s\\n"
            * content
  [text] > log
    seq > @
      *
        QQ.io.stdout
          "Log:\\n"
        output-multiline
          text
  [file content] > write
    QQ.txt.text > write-file
      "write-file"
    seq > @
      *
        send-command
          write-file.chained
            * command-separator file.as-path
        output-multiline content
        get-confirmation
  [file] > read
    [items] > range
      QQ.structs.range > @
        []
          [num] > build
            num > @
            build (@.plus 1) > next
          build 0 > @
        items
    QQ.txt.text > read-file
      "read-file"
    seq > @
      *
        send-command
          read-file.chained
            * command-separator file.as-path
        QQ.io.stdin.next-line > metadata
        (QQ.txt.sscanf "(lines: %d)" metadata).at 0 > line-count
        joined. > content
          QQ.txt.text
            "\\n"
          mapped.
            range
              line-count
            QQ.io.stdin.next-line > [i]
        content
  [command] > send-command
    QQ.io.stdout > @
      chained.
        QQ.txt.text
          "Request: "
        *
          QQ.txt.text
            command
          QQ.txt.text
            "\\n"
  [] > get-response
    seq > @
      *
        QQ.io.stdin.next-line
  [] > get-confirmation
    seq > @
      *
        QQ.io.stdin.next-line
  [branch program-name] > version
    QQ.txt.text > get-version
      "get-version"
    seq > @
      *
        send-command
          get-version.chained
            * command-separator branch command-separator program-name
        get-response > version-number
        version-number
  [] > branch
    QQ.txt.text > get-branch
      "branch"
    seq > @
      *
        send-command
          get-branch
        get-response
  [] > program-name
    QQ.txt.text > program-name
      "program-name"
    seq > @
      *
        send-command
          program-name
        get-response
'''.strip()
# Mock external calls for testing
class MockExternal:
    def __init__(self, stdin=None):
        self.commands = []
        self.responses = []
        self.stdin = stdin or []
    def send_command(self, command):
        self.commands.append(command)
        print(f"Request: {command}")
    def get_response(self):
        if self.responses:
            return self.responses.pop(0)
        return "version1"
    def line_counter(self, line_count):
        print(f"(lines: {line_count})")
    def output_multiline(self, text):
        print(text)
    def log(self, text):
        print(f"Log:\\n{text}")
    def write(self, file, content):
        print(f"Writing to {file}:\\n{content}")
    def read(self, file):
        print(f"Reading from {file}")
    def get_confirmation(self):
        return "OK"
counter = 0
def execute_eo(eo_code, branch, program_name, versions = []):
  global counter
  counter += 1
  external = MockExternal()
  versions_eo = []
  for version in versions:
        version_number = version["version_number"]
        timestamp = version["timestamp"]
        program_version = f'''
        [version-number timestamp] > program-version{counter}
          version-number > @
        program-version{counter} "{version_number}" {timestamp} > version{counter}
        '''
        versions_eo.append(program_version)
  pre = "\\n".join(versions_eo)
  full_eo_code = f'''
{eo_code}
#QQ.io.stdin "stable" >  branch
#QQ.io.stdin "nginx"  >  program_name
{pre}
QQ.structs.list > list
list
'''.strip()
  versions_ref = []
  for i in range(len(versions)):
      versions_ref.append(f"version{i+1}")
  versions_list = " ".join(versions_ref)
  versions_list_full = f'''
  list {versions_list} > versions_eo{counter}
  '''
  if len(versions) > 0:
      eo_code = f'''
{full_eo_code}
{versions_list_full}
program-data "stable" "nginx" versions_eo{counter} > data
data.output-as-rss
'''
  else:
      eo_code = f'''
{full_eo_code}
QQ.structs.list > versions
program-data "stable" "nginx" versions > data
data.output-as-rss
'''
  QQ = Eo()
  def stdin_mock():
      return "TEST"
  QQ.io.stdin = io.StringIO()
  QQ.io.stdout = io.StringIO()
  QQ.sys.posix = lambda x: x
  QQ.txt.sprintf = lambda pattern, *args: pattern % args
  QQ.txt.text = str
  QQ.txt.sscanf = lambda pattern, line: line.split("|||")
  QQ.io.stdout = type('QQ.io.stdout', (object,), {'__gt__': lambda self, obj: None, '__lshift__': lambda self, obj: None, '__repr__': lambda self: "<QQ.io.stdout>"})()
  QQ.io.stdout.__class__.__name__ = 'QQ.io.stdout' 
  QQ.io.stdout = type('QQ.io.stdout', (object,), {'__gt__': lambda self, obj: None, '__lshift__': lambda self, obj: None, '__repr__': lambda self: "<QQ.io.stdout>"})()  
  QQ.io.stdout.write = lambda value: print(value, end="")
  QQ.fs.file = lambda file: type('QQ.fs.file', (object,), {'as_path': lambda self: file})()
  QQ.fs.path = lambda path:path
  QQ.structs.list = lambda value = None: list()
  QQ.structs.range = lambda items: range(items)
  QQ.structs.tuple = lambda t1=None, t2=None: (t1, t2)
  QQ.external = external
  QQ.program_name = program_name
  QQ.branch = branch
  env = {
      "QQ": QQ,
  }
  #redirect output
  old_stdout = sys.stdout
  sys.stdout = io.StringIO()
  try:
    program = Eo(eo_code, env).program
    program(). яети()
    result = sys.stdout.getvalue().strip()
  except Exception as e:
        result = str(e)
  finally:
    #Restore stdout
    sys.stdout = old_stdout
  return result
# Run test
versions = [{"version_number": "1.0.0", "timestamp": 1678886400}, {"version_number": "1.1.0", "timestamp": 1678972800}]
doctest = execute_eo(eo_code, "stable", "nginx", versions)
print(doctest)
"""