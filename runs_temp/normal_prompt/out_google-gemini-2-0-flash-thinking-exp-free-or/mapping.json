["<explanation>\nObject `app` is the main application entry point. It takes a list of arguments, expecting the first argument to be the path to the state directory. In an infinite loop, it retrieves the branch and program name from external sources. It then reads existing program data from storage, retrieves the current program version from an external source, updates the program data with the new version, writes the updated data back to the storage in the specified state path, and finally outputs the program versions as an RSS feed to stdout.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    app\n      \"test-state-path\"\n</doctest-code>\n<doctest-stdin>\ntest-branch\ntest-program\n1.0\nconfirmation\nconfirmation\n</doctest-stdin>\n<doctest-output>\nLog:\nReading...\nLog:\nGetting current version\nLog:\nWriting...\nLog:\n\nRequest: Request: branch\nRequest: Request: program-name\nRequest: Request: get-version|||test-branch|||test-program\nRequest: Request: write-file|||test-state-path/test-branch/test-program\n(lines: 1)\n\nRss:\n(lines: 10)\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>test-program versions</title>\n  <link>https://search.nixos.org/packages?channel=test-branch&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\n  <description>History of versions</description>\n  <item>\n    <title>1.0</title>\n    <link>https://search.nixos.org/packages?channel=test-branch&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\n    <description>New version at 0</description>\n  </item>\n</channel>\n\n</rss>\n\n</doctest-output>","<explanation>\nObject that is responsible for managing persistent storage of program version data. It takes `state-path` as input, which defines the directory where program data will be stored.\n\nIt provides functions to:\n- `data-file`: construct the file path for storing data related to a specific branch and program name within the `state-path`.\n- `read`: read program version data from a file. If the file doesn't exist, it returns an empty list of versions. It expects data in \"version_number|||timestamp\" format per line.\n- `write`: write program version data to a file, serializing each version number and timestamp into \"version_number|||timestamp\" format on a new line.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    QQ.fs.path > state-path\n      \"test-state\"\n    program-data-storage > storage\n      state-path\n    program-version > version1\n      \"1.0.0\"\n      1678886400\n    program-version > version2\n      \"1.1.0\"\n      1678972800\n    program-data > data-to-write\n      \"test-branch\"\n      \"test-program\"\n      QQ.structs.list\n        version1\n        version2\n    storage.write > _\n      data-to-write\n    storage.read > read-data\n      \"test-branch\"\n      \"test-program\"\n    QQ.txt.sprintf\n      \"%s\"\n      *\n        read-data.versions.at 0.version-number\n</doctest-code>\n<doctest-stdin>\nRequest: write-file|||test-state/test-branch/test-program\n(lines: 2)\n1.0.0|||1678886400\n1.1.0|||1678972800\n\nConfirmation: OK\nRequest: read-file|||test-state/test-branch/test-program\n(lines: 2)\n1.0.0|||1678886400\n1.1.0|||1678972800\n</doctest-stdin>\n<doctest-output>\n1.0.0\n</doctest-output>","```\n<explanation>\nObject representing program data, including its name, versions, and functionality to output versions in RSS format. The default object value is the program name itself. It contains two sub-functions: `output-as-rss` which prints the program's version history in RSS format to standard output, and `actualized` which updates the version list by appending a new version if it's not already the latest version.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    program-data\n      \"test-branch\"\n      \"test-program\"\n      *\n        QQ.structs.list\n          program-version\n            \"1.0.0\"\n            1678886400\n          program-version\n            \"1.1.0\"\n            1678972800\n    .output-as-rss\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nRss:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>test-program versions</title>\n  <link>https://search.nixos.org/packages?channel=test-branch&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\n  <description>History of versions</description>\n  <item>\n    <title>1.0.0</title>\n    <link>https://search.nixos.org/packages?channel=test-branch&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\n    <description>New version at 1678886400</description>\n  </item>\n  <item>\n    <title>1.1.0</title>\n    <link>https://search.nixos.org/packages?channel=test-branch&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\n    <description>New version at 1678972800</description>\n  </item>\n</channel>\n\n</rss>\n\n</doctest-output>\n```","<explanation>\nUpdates the list of program versions. It checks if the provided `new-version` is already the latest version in the list. If it is, the list remains unchanged. Otherwise, the `new-version` is appended to the list of versions.\n</explanation>\n<doctest-code>\n[] > initial-versions\n  QQ.structs.list\n    program-version\n      \"0.1\"\n      10000\n\n[] > initial-program-data\n  program-data > @\n    \"test-branch\"\n    \"test-program\"\n    initial-versions\n\n[] > test-version\n  program-version > @\n    \"1.0\"\n    12345\n\n[] > doctest\n  initial-program-data.actualized > updated-program-data\n    test-version\n  updated-program-data.output-as-rss > @\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nRss:\n(lines: 12)\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>test-program versions</title>\n  <link>https://search.nixos.org/packages?channel=test-branch&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\n  <description>History of versions</description>\n  <item>\n    <title>0.1</title>\n    <link>https://search.nixos.org/packages?channel=test-branch&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\n    <description>New version at 10000</description>\n  </item>\n  <item>\n    <title>1.0</title>\n    <link>https://search.nixos.org/packages?channel=test-branch&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\n    <description>New version at 12345</description>\n  </item>\n</channel>\n\n</rss>\n\n</doctest-output>","<explanation>\nRepresents a program version, characterized by a version number and a timestamp. It takes version number and timestamp as input, but the object itself evaluates only to the version number.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    QQ.txt.sprintf\n      \"%s\"\n      *\n        program-version\n          \"1.2.3\"\n          1678886400\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\n1.2.3\n</doctest-output>","<explanation>\nObject `external` provides a set of functions to interact with external system.\nIt includes functionality for logging, file operations (reading and writing files), and fetching external data like branch, program name, and version.\nIt communicates with the external system by sending commands to stdout and reading responses from stdin.\n</explanation>\n<doctest-code>\n[] > doctest\n  seq > @\n    *\n      external.log\n        \"some log message\"\n      external.write\n        \"test-file\"\n        \"content line 1\\ncontent line 2\"\n      external.read\n        \"test-file\"\n      external.version\n        \"branch-name\"\n        \"program-name\"\n      external.branch\n      external.program-name\n</doctest-code>\n<doctest-stdin>\nconfirmation\n(lines: 2)\nline 1\nline 2\n1.2.3\nmain\nmy-program\n</doctest-stdin>\n<doctest-output>\nLog:\n(lines: 1)\nsome log message\nRequest: write-file|||test-file\n(lines: 2)\ncontent line 1\ncontent line 2\nRequest: get-confirmation\nRequest: read-file|||test-file\nRequest: get-version|||branch-name|||program-name\nRequest: branch\nRequest: program-name\n</doctest-output>"]