["<explanation>\nThe application tracks software versions, constructs RSS feeds, and interacts with external services via stdin/stdout. It reads the branch and program name, fetches the latest version, checks stored data, outputs RSS feed entries, and handles protocol-based communication with an external service.\n</explanation>\n<doctest-code>\n[] > doctest\n  external > @\n  app > @\n    [\n      \"/tmp/test-state\"\n    ]\n</doctest-code>\n<doctest-stdin>\nmaster\ntest-program\n1.2.3\n5\n0|||1600000000\n1\n(get-version response)\n(write confirmation)\n</doctest-stdin>\n<doctest-output>\nLog:\n(write command sent)\n(lines: 1)\n(write content lines)\n(items: 1)\nRss:\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>test-program versions</title>\n  <link>https://search.nixos.org/packages?channel=master&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\n  <description>History of versions</description>\n    <item>\n      <title>1.2.3</title>\n      <link>https://search.nixos.org/packages?channel=master&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\n      <description>New version at 1600000000</description>\n    </item>\n</channel>\n\n</rss>\n</doctest-output>","<explanation>\nManages storage of program version data to a file hierarchy under the specified state path. Provides read and write operations to persist version records and generate RSS feeds based on stored data.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    program-data-storage > storage \n      \"var/app\"\n    storage.write > data\n      program-data\n        \"nixos\"\n        \"test-prog\"\n        *[ program-version \"1.2.3beta\" 1677734400 ]\n    data.output-as-rss\n</doctest-code>\n<doctest-stdin>\nnixos\ntest-prog\n</doctest-stdin>\n<doctest-output>\nRss:\n(lines: 12)\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>test-prog versions</title>\n  <link>https://search.nixos.org/packages?channel=nixos&from=0&size=50&sort=relevance&type=packages&query=test-prog</link>\n  <description>History of versions</description>\n  <item>\n    <title>1.2.3beta</title>\n    <link>https://search.nixos.org/packages?channel=nixos&from=0&size=50&sort=relevance&type=packages&query=test-prog</link>\n    <description>New version at 1677734400</description>\n  </item>\n</channel>\n\n\n</rss>\n\n</doctest-output>","<explanation>\nAn object representing program data with version history. Creates RSS XML when output, and tracks versions without duplicates.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    seq\n      *\n        program-data.output-as-rss\n          \"main\"\n          \"example-prog\"\n          mapped.\n            *\n              program-version \"1.0\" 1609459200\n              program-version \"1.1\" 1612137600\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nRss:\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>example-prog versions</title>\n  <link>https://search.nixos.org/packages?channel=main&from=0&size=50&sort=relevance&type=packages&query=example-prog</link>\n  <description>History of versions</description>\n  <item>\n    <title>1.0</title>\n    <link>https://search.nixos.org/packages?channel=main&from=0&size=50&sort=relevance&type=packages&query=example-prog</link>\n    <description>New version at 1609459200</description>\n  </item>\n  <item>\n    <title>1.1</title>\n    <link>https://search.nixos.org/packages?channel=main&from=0&size=50&sort=relevance&type=packages&query=example-prog</link>\n    <description>New version at 1612137600</description>\n  </item>\n</channel>\n\n\n</rss>\n</doctest-output>","<explanation>\nUpdates the program's version list with a new version only if it isn't already the latest entry in the list.\n</explanation>\n<doctest-code>\n[] > doctest\n  # Test adding to empty list\n  program-data > empty\n    \"branch\" \"program\" []\n  new-data-empty > empty.actualized\n    program-version \"1.0\" 100\n  # Test adding same version again\n  already-present > empty.actualized\n    program-version \"2.0\" 200\n    no?  # forcing same arguments for clarity\n  program-data > same-again\n    already-present.actualized\n      program-version \"2.0\" 200\n  # Test appending new version\n  new-data-appended > empty.actualized\n    program-version \"3.0\" 300\n\n  QQ.io.stdout > @\n    *\n      \"Empty -> 1: \" new-data-empty.versions.length\n      \"\\nSame not added: \" same-again.versions.length\n      \"\\nNew appended: \" new-data-appended.versions.length\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nEmpty -> 1: 1\nSame not added: 1\nNew appended: 1\n</doctest-output>","<explanation>\nRepresents a program version consisting of a version number and timestamp. The object evaluates to its version number when used standalone, but stores both fields internally.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    QQ.txt.sprintf\n      \"Version: %s, Timestamp: %d\"\n      *\n        test-obj.version-number\n        test-obj.timestamp\n    \"\\n\"\n\n  [\"1.2.3\" 987654321] > test-obj\n    program-version\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nVersion: 1.2.3, Timestamp: 987654321\n</doctest-output>","<explanation>\nCentral abstraction for interacting with an external system via structured command requests/responses over stdin/stdout. Provides functions for logging, file operations, program metadata fetching, and command executions.\n</explanation>\n<doctest-code>\n[] > doctest\n  external.log > @\n    \"Sample Log Entry\"\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nLog:\n(lines: 1)\nSample Log Entry\n</doctest-output>"]