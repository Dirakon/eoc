["```\n<explanation>\nThis code defines an application (`app`) that manages program versions and saves them to disk, offering an RSS feed of the version history. It interacts with an \"external\" system to get program versions, branch names, program names, and to read/write data. It utilizes file system operations to store program data. Several helper objects are defined: `program-data-storage`, `program-data`, `program-version`, and `external`. The application takes a path to a state directory as input.\n\nThe code revolves around reading the current state, fetching the current version, updating the state with the new version, and saving the updated state to a file. The `external` object provides functions for interacting with external systems or commands (simulated through stdin/stdout in tests).\n\nKey components:\n\n- `app`: Main application that orchestrates the version update and storage process.\n- `program-data-storage`: Handles reading and writing program data to the file system.\n- `program-data`: Represents the data for a program, including its versions.\n- `program-version`: Represents a specific version of a program, including its version number and timestamp.\n- `external`: Provides an abstraction for interacting with external tools or commands. Simulates external actions by using text commands and simple IO through stdin and stdout.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.txt.text > test-file\n    \"test_data.txt\"\n  QQ.txt.text > test-branch\n    \"test-branch\"\n  QQ.txt.text > test-program\n    \"test-program\"\n  QQ.txt.text > first-version\n    \"1.2.3\"\n  QQ.txt.text > second-version\n    \"1.2.4\"\n  [] > run\n    app > the-app\n      args.\n        tuple\n          test-file\n    seq > @\n      *\n        the-app\n        external.log\n          \"Running one more time\"\n        the-app\n  run > the-result\n</doctest-code>\n<doctest-stdin>\nRequest: get-branch\ntest-branch\nRequest: program-name\ntest-program\nLog:\nReading...\nLog:\nGetting current version\nRequest: get-version|||test-branch|||test-program\n1.2.3\nLog:\n\nRequest: write-file|||test_data.txt/test-branch/test-program\nLog:\n1.2.3|||0\nRequest: branch\ntest-branch\nRequest: program-name\ntest-program\nLog:\nRunning one more time\nLog:\nReading...\nLog:\nGetting current version\nRequest: get-version|||test-branch|||test-program\n1.2.4\nLog:\n\nRequest: write-file|||test_data.txt/test-branch/test-program\nLog:\n1.2.3|||0\n1.2.4|||0\nRequest: \n</doctest-stdin>\n<doctest-output>\nRss:\n(lines: 17)\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>test-program versions</title>\n  <link>https://search.nixos.org/packages?channel=test-branch&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=test-program</link>\n  <description>History of versions</description>\n\n  <item>\n    <title>1.2.3</title>\n    <link>https://search.nixos.org/packages?channel=test-branch&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=test-program</link>\n    <description>New version at 0</description>\n  </item>\n\n</channel>\n\n</rss>\nRss:\n(lines: 22)\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>test-program versions</title>\n  <link>https://search.nixos.org/packages?channel=test-branch&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=test-program</link>\n  <description>History of versions</description>\n\n  <item>\n    <title>1.2.3</title>\n    <link>https://search.nixos.org/packages?channel=test-branch&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=test-program</link>\n    <description>New version at 0</description>\n  </item>\n\n  <item>\n    <title>1.2.4</title>\n    <link>https://search.nixos.org/packages?channel=test-branch&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=test-program</link>\n    <description>New version at 0</description>\n  </item>\n\n</channel>\n\n</rss>\n</doctest-output>\n```","```\n<explanation>\nRepresents storage for program data, using the file system. It manages reading and writing program version data to files within a specified directory structure (`state-path`).\n\n- It constructs file paths based on branch and program names.\n- It reads program data from files, parsing version information.\n- It writes program data to files, serializing version information.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    QQ.txt.sprintf\n      \"%s\"\n      *\n        (program-data-storage \"test\").data-file \"branch1\" \"program1\"\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\ntest/branch1/program1\n</doctest-output>\n```","```\n<explanation>\nRepresents data for a specific program and branch, including a list of versions. Provides functionality to output the versions as an RSS feed and update the version list.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    QQ.txt.sprintf\n      \"%s\"\n      *\n        seq > b\n          *\n            [] > external\n              [] > line-counter\n                0> @\n              [text] > log\n                QQ.io.stdout > @\n                  \"Log: \"\n             [file content] > write\n                text\n              [file] > read\n                QQ.txt.text  > @\n                  \"a|||100\"\n            [branch program-name versions] > program-data\n              program-name > @\n              [] > output-as-rss\n                \"ok\"\n            program-data > test\n              \"test-branch\"\n              \"test-program\"\n              QQ.structs.list\n                tuple.empty\n            test.output-as-rss\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nRss:\n(lines: 2)\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>test-program versions</title>\n  <link>https://search.nixos.org/packages?channel=test-branch&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\n  <description>History of versions</description>\n</channel>\n\n</rss>\n</doctest-output>\n```","```\n<explanation>\nTakes a program data and a new version and returns either the existing version list or a new version list appended with the new version if it's actually new.\n</explanation>\n<doctest-code>\n[] > doctest\n  [] > external\n    [] > log\n      [] > @\n        \"logging\"\n    \"1.2.3\" > version\n    [] > branch\n      \"my-branch\" > @\n    [] > program\n      \"my-program\" > @\n  program-data\n    \"my-branch\"\n    \"my-program\"\n    (QQ.vararg.array 1 2 3) > program-data\n  program-data.actualized\n    \"4\" > @\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nmy-program\n</doctest-output>\n```","```\n<explanation>\nRepresents a specific version of a program. It stores the version number (as a string) and a timestamp (presumably when the version was released or recorded).\n</explanation>\n<doctest-code>\n[] > doctest\n  program-version > version\n    \"1.2.3\"\n    1678886400\n  QQ.io.stdout > @\n    QQ.txt.sprintf \"%s %d\" version version.timestamp\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\n1.2.3 1678886400\n</doctest-output>\n```","```\n<explanation>\nAn object that encapsulates external interactions, providing methods to interact with the system through stdin/stdout. It provides functionalities like logging, reading from and writing to files, retrieving version information, branch names, and program names. All interactions are mediated through commands sent to stdout and responses received from stdin.\n</explanation>\n<doctest-code>\n[] > doctest\n  external.log \"test\" > @\n  external.write \"test-file\" \"test\" > @\n  external.read \"test-file\" > file_content\n  QQ.io.stdout > @\n    file_content\n</doctest-code>\n<doctest-stdin>\nRequest: Log:\nRequest: write-file|||test-file\n(lines: 1)\nRequest: read-file|||test-file\n(lines: 1)\n(lines: 1)\ntest\n</doctest-stdin>\n<doctest-output>\nLog:\nRequest: write-file|||test-file\nRequest: read-file|||test-file\ntest\n</doctest-output>\n```"]