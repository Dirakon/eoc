["<explanation>\nService that periodically checks for program versions, stores them in a state directory, and outputs an RSS feed with version history.\n</explanation>\n<doctest-code>\n[] > doctest\n  app > @\n    \"state\"\n</doctest-code>\n<doctest-stdin>\nmain\ntest\n1.0\nOK\n</doctest-stdin>\n<doctest-output>\nLog:\n(lines: 1)\nReading...\nLog:\n(lines: 1)\nGetting current version\nLog:\n(lines: 1)\nWriting...\nRss:\n(lines: 15)\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>test versions</title>\n  <link>https://search.nixos.org/packages?channel=main&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=test</link>\n  <description>History of versions</description>\n  <item>\n    <title>1.0</title>\n    <link>https://search.nixos.org/packages?channel=main&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=test</link>\n    <description>New version at 0</description>\n  </item>\n</channel>\n\n</rss>\n</doctest-output>","<explanation>\nManages reading and writing program version data to/from files in a specified directory structure. Serializes/deserializes version records and generates RSS-formatted output.\n</explanation>\n<doctest-code>\n[] > doctest\n  program-data-storage \"state_dir\" > storage\n  storage.write > @\n    program-data\n      \"main\"\n      \"testprog\"\n      QQ.structs.list\n        program-version \"v2.1\" 1678900000\n</doctest-code>\n<doctest-stdin>\nOK\n</doctest-stdin>\n<doctest-output>\nLog:\n(lines: 1)\nv2.1|||1678900000\nRss:\n(lines: 15)\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>testprog versions</title>\n  <link>https://search.nixos.org/packages?channel=main&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=testprog</link>\n  <description>History of versions</description>\n  <item>\n    <title>v2.1</title>\n    <link>https://search.nixos.org/packages?channel=main&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=testprog</link>\n    <description>New version at 1678900000</description>\n  </item>\n</channel>\n\n</rss>\n</doctest-output>","<explanation>\nRepresents program data with versions, manages their actualization, and outputs them as an RSS feed with line counting.\n</explanation>\n<doctest-code>\n[] > doctest\n  program-data \"stable\" \"testpkg\" (QQ.structs.list (program-version \"1.0\" 12345)) > pd\n  pd.output-as-rss > @\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nRss:\n(lines: 15)\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>testpkg versions</title>\n  <link>https://search.nixos.org/packages?channel=stable&from=0&size=50&sort=relevance&type=packages&query=testpkg</link>\n  <description>History of versions</description>\n  <item>\n    <title>1.0</title>\n    <link>https://search.nixos.org/packages?channel=stable&from=0&size=50&sort=relevance&type=packages&query=testpkg</link>\n    <description>New version at 12345</description>\n  </item>\n</channel>\n\n</rss>\n\n</doctest-output>","<explanation>\nUpdates the program's version history by adding a new version only if it is not already the latest entry, preventing duplicates unless the new version is the most recent.\n</explanation>\n<doctest-code>\n[] > doctest\n  program-data > data\n    \"main\"\n    \"test\"\n    (program-data \"main\" \"test\" (QQ.structs.list ())).actualized (program-version \"1.0\" 123)\n  data.output-as-rss > @\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nRss:\n(lines: 15)\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>test versions</title>\n  <link>https://search.nixos.org/packages?channel=main&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=test</link>\n  <description>History of versions</description>\n  <item>\n    <title>1.0</title>\n    <link>https://search.nixos.org/packages?channel=main&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=test</link>\n    <description>New version at 123</description>\n  </item>\n</channel>\n\n</rss>\n</doctest-output>","<explanation>\nRepresents a program version with a version number string and a timestamp integer.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    QQ.txt.sprintf\n      \"%s\"\n      *\n        program-version\n          \"1.2.3\"\n          1630000000\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\n1.2.3\n</doctest-output>","<explanation>\nFacilitates external system interactions including logging, file I/O, version checks, and command communication through formatted request/response patterns.\n</explanation>\n<doctest-code>\n[] > doctest\n  external.log \"Test\\nmultiline\\nmessage\"\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nLog:\n(lines: 3)\nTest\nmultiline\nmessage\n</doctest-output>"]