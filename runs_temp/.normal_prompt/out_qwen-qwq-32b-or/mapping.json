["```\n<explanation>\nApplication that tracks program versions from an external source, stores changes, and outputs RSS feeds documenting version history. It reads a state directory path as an argument, continuously monitors the program's latest version through external interfaces, updates local storage, and emits XML RSS feeds reflecting all known versions.\n</explanation>\n<doctest-code>\n[] > doctest\n  [1680000000] > current-time\n    [1680000000] > @\n  QQ.io.stdout > @\n    app\n      * \n        [\"test-path\"]\n</doctest-code>\n<doctest-stdin>\ntest-branch\ntest-program\n0.1.0\n</doctest-stdin>\n<doctest-output>\nRss:\n(lines: 9)\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\\n<rss version=\"2.0\">\\n\\n<channel>\\n  <title>test-program versions</title>\\n  <link>https://search.nixos.org/packages?channel=test-branch&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\\n  <description>History of versions</description>\\n  <item>\\n    <title>0.1.0</title>\\n    <link>https://search.nixos.org/packages?channel=test-branch&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\\n    <description>New version at 1680000000</description>\\n  </item>\\n</channel>\\n\\n\\n</rss>\\n\n</doctest-output>\n```","<explanation>\nManages storage for program data versions. Provides methods to read and write versions to a path-based file system. Data is stored in files organized by branch and program name under the state path. Persists versions as formatted text files and handles file system operations externally.\n</explanation>\n<doctest-code>\n[] > doctest\n  seq > @\n    *\n      program-data-storage > storage\n        \"test_state_path\"\n      program-version > v\n        \"1.0\"\n        1620000000\n      program-data > test_data\n        \"main\" # branch\n        \"test-program\" # program-name\n        [v]\n      storage.write > @ # perform write\n        test_data\n      storage.read > loaded\n        \"main\"\n        \"test-program\"\n      loaded.output-as-rss > @\n</doctest-code>\n<doctest-stdin>\n(lines:1)\n1.0|||1620000000\n</doctest-stdin>\n<doctest-output>\nRss:\n(line: 10)\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>test-program versions</title>\n  <link>https://search.nixos.org/packages?channel=main&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\n  <description>History of versions</description>\n  <item>\n    <title>1.0</title>\n    <link>https://search.nixos.org/packages?channel=main&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\n    <description>New version at 1620000000</description>\n  </item>\n</channel>\n\n</rss>\n</doctest-output>","<explanation>\nHolds program metadata with version history and generates an RSS feed describing its versions. It also manages state updates by checking if a new version is already stored.\n</explanation>\n<doctest-code>\n[] > doctest\n  program-data > sample-data\n    \"nixos-22.05\"\n    \"wget\"\n    *[version]\n      program-version\n        \"1.20\"\n        123456789\n  sample-data.output-as-rss > @\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nRss:\n(lines: 18)\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>wget versions</title>\n  <link>https://search.nixos.org/packages?channel=nixos-22.05&from=0&size=50&sort=relevance&type=packages&query=wget</link>\n  <description>History of versions</description>\n  <item>\n    <title>1.20</title>\n    <link>https://search.nixos.org/packages?channel=nixos-22.05&from=0&size=50&sort=relevance&type=packages&query=wget</link>\n    <description>New version at 123456789</description>\n  </item>\n</channel>\n</rss>\n</doctest-output>","<explanation>\nEnsures that the program's version history list is updated with the new version only if it isn't already the last entry in the list, preventing duplicate entries.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    *\n      # Test adding valid new version\n      (program-data\n        \"test-branch\"\n        \"myapp\"\n        [\n          (program-version \"v1\" 123456)\n          (program-version \"v2\" 234567)\n        ]\n       .actualized (program-version \"v3\" 345678)\n      ).output-as-rss.line-counter > @\n\n      # Test adding duplicate of last version\n      (program-data\n        \"test-branch\"\n        \"myapp\"\n        [\n          (program-version \"v3\" 345678)\n          (program-version \"v4\" 456789)\n        ]\n       .actualized (program-version \"v4\" 456789)\n      ).output-as-rss.line-counter > @\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\n(lines: 25)\n(lines: 20)\n</doctest-output>","<explanation>\nRepresents a software version with a timestamp, returning only the version string when evaluated.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    program-version\n      \"v2.4.1\"\n      1703042300\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nv2.4.1\n</doctest-output>","<explanation>\nEncapsulates interaction with an external system via command-based communication over stdin/stdout. Provides logging, file operations, and data query functions where commands use a \"|||\"-separated protocol for parameters.\n</explanation>\n<doctest-code>\n[] > doctest\n  external.log > @\n    \"Sample log entry line one\\nSecond line test message\"\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nLog:\n(lines: 2)\nSample log entry line one\nSecond line test message\n</doctest-output>"]