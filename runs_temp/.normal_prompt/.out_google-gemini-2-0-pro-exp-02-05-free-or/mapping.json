["```\n<explanation>\nThe entrypoint object for the application. It takes a single argument - a list that contains path to program data file.\nIt uses an infinite `while` loop to poll an external program for new versions of packages. For each version, it saves it on disk. Finally, formats program data and sends it to stdout in the format of RSS feed.\n</explanation>\n<doctest-code>\n[] > ignore\n  TRUE > @\n\n[] > dummy-external\n  \"dummy-external\" > @\n\n  [] > output-multiline\n    QQ.io.stdout > @\n      \"dummy-multiline\"\n\n  [text] > log\n    seq > @\n      *\n        QQ.io.stdout\n          \"Log:\\n\"\n        dummy-external.output-multiline\n          text\n\n  [file content] > write\n    seq > @\n      *\n        QQ.io.stdout\n          \"Writing to file... (ignore)\\n\"\n        ignore\n\n  [file] > read\n    \"\" > @\n\n  [branch program-name] > version\n    \"version\" > @\n\n  [command] > send-command\n    seq > @\n      *\n        QQ.io.stdout\n          command\n          \"\\n\"\n        ignore\n\n  [] > branch\n    \"main\" > @\n  [] > program-name\n    \"my-program\" > @\n\n[] > doctest\n  app > @\n    *\n      \"my-data.txt\"\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nRequest: write-file|||my-data.txt\ndummy-multiline\nLog:\ndummy-multiline\nRequest: get-version|||main|||my-program\nLog:\ndummy-multiline\nRequest: write-file|||my-data.txt\ndummy-multiline\nRss:\n(lines: 15)\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>my-program versions</title>\n  <link>https://search.nixos.org/packages?channel=main&from=0&size=50&sort=relevance&type=packages&query=my-program</link>\n  <description>History of versions</description>\n  <item>\n    <title>version</title>\n    <link>https://search.nixos.org/packages?channel=main&from=0&size=50&sort=relevance&type=packages&query=my-program</link>\n    <description>New version at 0</description>\n  </item>\n</channel>\n\n</rss>\n\nRequest: write-file|||my-data.txt\ndummy-multiline\nLog:\ndummy-multiline\nRequest: get-version|||main|||my-program\nLog:\ndummy-multiline\nRequest: write-file|||my-data.txt\ndummy-multiline\nRss:\n(lines: 20)\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>my-program versions</title>\n  <link>https://search.nixos.org/packages?channel=main&from=0&size=50&sort=relevance&type=packages&query=my-program</link>\n  <description>History of versions</description>\n  <item>\n    <title>version</title>\n    <link>https://search.nixos.org/packages?channel=main&from=0&size=50&sort=relevance&type=packages&query=my-program</link>\n    <description>New version at 0</description>\n  </item>\n  <item>\n    <title>version</title>\n    <link>https://search.nixos.org/packages?channel=main&from=0&size=50&sort=relevance&type=packages&query=my-program</link>\n    <description>New version at 0</description>\n  </item>\n</channel>\n\n</rss>\n\n</doctest-output>\n```","```\n<explanation>\nObject that stores the program data (branch, program name and versions) persistently.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    QQ.txt.sprintf\n      \"%s\"\n      *\n        program-data-storage\n          \"the-state-path.txt\"\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nthe-state-path.txt\n</doctest-output>\n```","```\n<explanation>\nStores data about program: its name, current branch, and versions.\n</explanation>\n<doctest-code>\n[] > doctest\n  program-data > pd\n    \"main\"\n    \"firefox\"\n    QQ.structs.list\n      *\n        program-version \"1\" 1\n        program-version \"2\" 2\n  pd.output-as-rss\n</doctest-code>\n<doctest-stdin>\n(lines: 15)\n</doctest-stdin>\n<doctest-output>\nRss:\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>firefox versions</title>\n  <link>https://search.nixos.org/packages?channel=main&from=0&size=50&sort=relevance&type=packages&query=firefox</link>\n  <description>History of versions</description>\n  <item>\n    <title>1</title>\n    <link>https://search.nixos.org/packages?channel=main&from=0&size=50&sort=relevance&type=packages&query=firefox</link>\n    <description>New version at 1</description>\n  </item>\n  <item>\n    <title>2</title>\n    <link>https://search.nixos.org/packages?channel=main&from=0&size=50&sort=relevance&type=packages&query=firefox</link>\n    <description>New version at 2</description>\n  </item>\n</channel>\n\n</rss>\n\n</doctest-output>\n```","```\n<explanation>\nReturns a new `program-data` object. The `new-version` is added to its `versions` list, except for the case if `new-version` is already the last element of `versions` list and `versions` is not empty - then no changes applied.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    QQ.txt.sprintf\n      \"%s\"\n      *\n        program-data\n          \"main\"\n          \"htop\"\n          QQ.structs.list\n            tuple.empty\n        .actualized\n          program-version\n            \"3.2.1\"\n            1678882866\n        .actualized\n          program-version\n            \"3.2.2\"\n            1678882867\n        .versions.at 1.version-number\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\n3.2.2\n</doctest-output>\n```\n","```\n<explanation>\nRepresents a program version, identified by its version number and timestamp.\n</explanation>\n<doctest-code>\n[] > doctest\n  program-version > version\n    \"1.0.0\"\n    1678886400\n  QQ.io.stdout > @\n    QQ.txt.sprintf\n      \"%s %d\"\n      *    \n        version.version-number\n        version.timestamp\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\n1.0.0 1678886400\n</doctest-output>\n```","```\n<explanation>\nObject that simulates external calls through stdin and stdout. All communication is done via Request and response.\n</explanation>\n<doctest-code>\n[] > doctest\n  seq > @\n    *\n      external.log \"hello world\"\n      QQ.io.stdout > out\n        external.version\n          \"nixpkgs-unstable\"\n          \"firefox\"\n</doctest-code>\n<doctest-stdin>\n115.0.2\n</doctest-stdin>\n<doctest-output>\nLog:\n(lines: 1)\nhello world\nRequest: get-version|||nixpkgs-unstable|||firefox\n115.0.2\n</doctest-output>\n```"]